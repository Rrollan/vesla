// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const TelegramBot = require('node-telegram-bot-api');
const xlsx = require('xlsx');
const fs = require('fs');

// –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø
const fileUpload = require('express-fileupload');
const sharp = require('sharp');
const axios = require('axios');
const FormData = require('form-data');

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000;
const TELEGRAM_BOT_TOKEN = '8227812944:AAFy8ydOkUeCj3Qkjg7_Xsq6zyQpcUyMShY'; 

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
try {
  const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY 
    ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY)
    : require('./serviceAccountKey.json');
  
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
  }
} catch (error) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª serviceAccountKey.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_SERVICE_ACCOUNT_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
}

const db = admin.firestore();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

// --- MIDDLEWARE ---
app.use(express.static(path.join(__dirname, '/')));
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS') return res.sendStatus(200);
    next();
});

app.use(fileUpload());
app.use(express.json({ limit: '10mb' }));

// --- –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢ ---
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// ======================================================================
// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
// ======================================================================

function determineBloggerLevel(followersCount) {
    const count = Number(followersCount) || 0;
    if (count <= 6000) return { level: 'micro', text: '–ú–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä' };
    if (count <= 10500) return { level: 'macro-a', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø A' };
    return { level: 'macro-b', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø B' };
}

function calculateBloggerRating(user) {
    const { followersCount = 0, avgViews = 0 } = user.registration || {};
    const strikes = user.strikes || 0;
    const followersScore = followersCount > 0 ? Math.log10(followersCount) * 2.5 : 0;
    const viewsScore = avgViews > 0 ? Math.log10(avgViews) * 4.5 : 0;
    let rating = ((followersScore + viewsScore - (strikes * 1.5)) / 25) * 10;
    return Math.max(1, Math.min(10, rating)).toFixed(1);
}

function personalizeMessage(template, user) {
    if (!user) return template;
    
    const registrationData = user.registration || {};
    const levelInfo = determineBloggerLevel(registrationData.followersCount);
    const rating = calculateBloggerRating(user);

    const instagramLogin = (registrationData.instagramLogin || '').replace('@', '');
    const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

    return template
        .replace(/{firstName}/g, registrationData.firstName || '')
        .replace(/{instagramLogin}/g, instagramLink) 
        .replace(/{followersCount}/g, registrationData.followersCount || '0')
        .replace(/{level}/g, levelInfo.text || '')
        .replace(/{rating}/g, rating || '0.0');
}

async function sendAdminNotification(orderData, screenshotFileBuffer) {
  const adminSnapshot = await db.collection('admins').get();
  if (adminSnapshot.empty) return;

  const adminDocs = adminSnapshot.docs.filter(doc => doc.data().receivesNotifications !== false);
  if (adminDocs.length === 0) return;

  const adminChatIds = adminDocs.map(doc => doc.id);
  
  const instagramLogin = (orderData.instagram || '').replace('@', '');
  const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

  let message = `*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞—Ä—Ç–µ—Ä*\n\n` +
                `üìù *–ó–∞–∫–∞–∑:* \`${orderData.orderNumber}\`\n` +
                `üë§ *–ë–ª–æ–≥–µ—Ä:*\n` +
                `–ò–º—è: ${orderData.userName}\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: \`${orderData.phone}\`\n` +
                `Instagram: ${instagramLink}\n` +
                `–£—Ä–æ–≤–µ–Ω—å: ${determineBloggerLevel(orderData.followersCount).text}`;

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è V-Coins –∏–ª–∏ –°–µ—Ç–∞
    if (orderData.vcoin_cost) {
        const itemsList = orderData.items.map(item => `- ${item.name} (x${item.quantity})`).join('\n');
        message += `\n\nüõçÔ∏è *–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:*\n${itemsList}\n` +
                   `*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${orderData.vcoin_cost.toFixed(1)} VC\n` +
                   `*–ö –¥–æ–ø–ª–∞—Ç–µ:* *${(orderData.payment_due_tenge || 0).toFixed(0)} ‚Ç∏*`;
    } else if (orderData.setName) {
        message += `\nüç± *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* ${orderData.setName}`;
    }

  message += `\n\nüóì *–î–æ—Å—Ç–∞–≤–∫–∞:*\n` +
             `–î–∞—Ç–∞: ${orderData.date} –≤ ${orderData.time}\n` +
             `–ì–æ—Ä–æ–¥: ${orderData.city}\n` +
             `–ê–¥—Ä–µ—Å: ${orderData.street}, –ø. ${orderData.entrance || '-'}, —ç—Ç. ${orderData.floor || '-'}\n` +
             `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment || '-'}`;
  
  for (const chatId of adminChatIds) {
    try {
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${chatId}:`, error.response?.body?.description || error.message);
    }
  }
}

async function sendExcelFile(chatId, data, fileNamePrefix, sheetName) {
    if (!data || !Array.isArray(data) || !chatId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
    }
    
    if (data.length === 0) {
        await bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: —Å–ø–∏—Å–æ–∫ (${fileNamePrefix}) –ø—É—Å—Ç.`);
        return;
    }
    const processedData = data.map(row => {
        const newRow = {};
        for (const key in row) {
            const value = row[key];
            if (typeof value === 'string' && value.startsWith('=HYPERLINK')) {
                const match = value.match(/=HYPERLINK\("([^"]+)", "([^"]+)"\)/);
                if (match) {
                    newRow[key] = { t: 's', v: match[2], l: { Target: match[1], Tooltip: '–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ' } };
                } else {
                    newRow[key] = value;
                }
            } else {
                newRow[key] = value;
            }
        }
        return newRow;
    });

    const worksheet = xlsx.utils.json_to_sheet(processedData);
    
    const columnWidths = Object.keys(processedData[0]).map(key => ({
        wch: processedData.reduce((w, r) => Math.max(w, String(r[key] || '').length), key.length + 2)
    }));
    worksheet['!cols'] = columnWidths;

    const workbook = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(workbook, worksheet, sheetName);
    
    const fileBuffer = xlsx.write(workbook, { bookType: 'xlsx', type: 'buffer' });
    const date = new Date().toISOString().split('T')[0];
    const fileName = `${fileNamePrefix}_export_${date}.xlsx`;
    
    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (DEPRECATION WARNING) =====
    // –¢–µ–ø–µ—Ä—å fileOptions –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç –≤ –≤—ã–∑–æ–≤–µ.
    await bot.sendDocument(chatId, fileBuffer, {}, { 
        filename: fileName, 
        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
    });
}

// ======================================================================
// === API –ú–ê–†–®–†–£–¢–´ ===
// ======================================================================
app.post('/api/create-order', async (req, res) => {
    try {
        if (!req.body.order) {
            return res.status(400).json({ error: 'Order data is missing.' });
        }
        const orderData = JSON.parse(req.body.order);
        const userRef = db.collection('users').doc(orderData.userId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        await db.runTransaction(async (transaction) => {
            const userDoc = await transaction.get(userRef);
            if (!userDoc.exists) {
                throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            const userData = userDoc.data();
            const orderRef = db.collection('orders').doc(orderData.id);

            // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userUpdates = {
                orders: admin.firestore.FieldValue.arrayUnion({
                    id: orderData.id,
                    orderNumber: orderData.orderNumber,
                    status: 'new',
                    createdAt: orderData.createdAt
                }),
                tags: admin.firestore.FieldValue.arrayUnion(orderData.city.toLowerCase().replace(/\s/g, '-'))
            };

            // –õ–æ–≥–∏–∫–∞ –¥–ª—è V-Coins
            if (orderData.vcoin_cost && orderData.vcoin_cost > 0) {
                // –≠—Ç–æ –∑–∞–∫–∞–∑ –∑–∞ V-Coins
                const currentBalance = userData.vcoin_balance || 0;
                userUpdates.vcoin_balance = currentBalance - orderData.vcoin_cost;
            } else {
                // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –º–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä–∞ (—Å–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–ª–¥–∞—É–Ω
                userUpdates.lastOrderTimestamp = orderData.createdAt;
                userUpdates.cooldownNotified = false;
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction.set(orderRef, orderData);
            transaction.update(userRef, userUpdates);
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await sendAdminNotification(orderData);

        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.' });
    }
});

app.post('/api/upload-menu-image', async (req, res) => {
    const IMGBB_API_KEY = '5148efee12c90f87021e50e0155d17a0'; 

    if (!IMGBB_API_KEY || IMGBB_API_KEY === 'YOUR_IMGBB_API_KEY_HERE') {
        return res.status(500).json({ error: 'API –∫–ª—é—á –¥–ª—è ImgBB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.' });
    }
    if (!req.files || !req.files.image) {
        return res.status(400).json({ error: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.' });
    }
    const imageFile = req.files.image;

    try {
        const processedImageBuffer = await sharp(imageFile.data)
            .resize(500, 500, { fit: 'cover', position: 'center' })
            .webp({ quality: 80 })
            .toBuffer();
            
        const formData = new FormData();
        formData.append('key', IMGBB_API_KEY);
        formData.append('image', processedImageBuffer.toString('base64'));

        const response = await axios.post('https://api.imgbb.com/1/upload', formData);

        if (response.data.success) {
            res.status(200).json({ success: true, imageUrl: response.data.data.url });
        } else {
            throw new Error(response.data.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ImgBB');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.response ? error.response.data : error.message);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.' });
    }
});

app.post('/api/export-users', async (req, res) => {
    try {
        const { data, chatId } = req.body;
        // –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è V-Coins –≤ —ç–∫—Å–ø–æ—Ä—Ç
        const formattedData = data.map(user => {
            const reg = user.registration || user;
            const instagramLogin = (reg.instagramLogin || '').replace('@', '');
            const url = `https://www.instagram.com/${instagramLogin}`;
            return {
                '–ò–º—è': reg.firstName, '–¢–µ–ª–µ—Ñ–æ–Ω': reg.phone,
                'Instagram': `=HYPERLINK("${url}", "@${instagramLogin}")`,
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': reg.followersCount, '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': reg.avgViews, '–†–µ–π—Ç–∏–Ω–≥': calculateBloggerRating(user),
                '–£—Ä–æ–≤–µ–Ω—å': determineBloggerLevel(reg.followersCount).text, 
                '–ë–∞–ª–∞–Ω—Å V-Coins': user.vcoin_balance || 0,
                '–õ–∏–º–∏—Ç V-Coins': user.vcoin_allowance || 0,
                '–°—Ç–∞—Ç—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏': user.loyaltyStatus || 'standard',
                '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω': user.isBlocked ? '–î–∞' : '–ù–µ—Ç', '–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏': user.blockReason, '–®—Ç—Ä–∞—Ñ—ã': user.strikes || 0,
                '–¢–µ–≥–∏': (user.tags || []).join('; '), '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': new Date(user.registrationDate).toLocaleDateString('ru-RU'),
            };
        });
        await sendExcelFile(chatId, formattedData, 'users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

app.post('/api/export-orders', async (req, res) => {
    try {
        const { data, chatId } = req.body;
        // –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è V-Coins –≤ —ç–∫—Å–ø–æ—Ä—Ç
        const formattedData = data.map(order => {
            const instagramLogin = (order.instagram || '').replace('@', '');
            const url = `https://www.instagram.com/${instagramLogin}`;
            return {
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': order.orderNumber, '–°—Ç–∞—Ç—É—Å': getStatusInfo(order.status).text, '–ò–º—è –±–ª–æ–≥–µ—Ä–∞': order.userName,
                '–¢–µ–ª–µ—Ñ–æ–Ω –±–ª–æ–≥–µ—Ä–∞': order.phone,
                'Instagram': `=HYPERLINK("${url}", "@${instagramLogin}")`,
                '–ì–æ—Ä–æ–¥': order.city, '–ê–¥—Ä–µ—Å': `${order.street}, –ø. ${order.entrance || '-'}, —ç—Ç. ${order.floor || '-'}`,
                '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': order.date, '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏': order.time,
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (VC)': order.vcoin_cost ? order.vcoin_cost.toFixed(1) : '-',
                '–ö –¥–æ–ø–ª–∞—Ç–µ (‚Ç∏)': order.payment_due_tenge ? order.payment_due_tenge.toFixed(0) : 0,
                '–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä': order.setName || '–ú–µ–Ω—é',
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': order.comment, '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç': order.reportLink,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(order.createdAt).toLocaleString('ru-RU')
            };
        });
        await sendExcelFile(chatId, formattedData, 'orders', '–ó–∞–∫–∞–∑—ã');
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

app.post('/api/broadcast', async (req, res) => {
    const { message, tags, senderChatId } = req.body;
    if (!message || !senderChatId) { return res.st
