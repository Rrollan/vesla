// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const fetch = require('node-fetch');

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000; // Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
// –í–ê–ñ–ù–û: –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫ try...catch, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ "–ø–∞–¥–∞–ª–æ",
// –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ).
try {
  const serviceAccount = require('/etc/secrets/serviceAccountKey.json'); 
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
} catch (error) {
  console.error("–ö–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω. Cron-–∑–∞–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
  console.log("–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª.");
}

const db = admin.firestore();
const TELEGRAM_BOT_TOKEN = '8227812944:AAFy8ydOkUeCj3Qkjg7_Xsq6zyQpcUyMShY'; // –í–∞—à —Ç–æ–∫–µ–Ω

// --- –õ–û–ì–ò–ö–ê –°–ï–†–í–ï–†–ê ---

// 1. –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (index.html, logo.jpg –∏ —Ç.–¥.)
// Express –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç server.js
app.use(express.static(path.join(__dirname, '/')));

// 2. –û—Ç–¥–∞–µ–º index.html –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// --- –õ–û–ì–ò–ö–ê PUSH-–£–í–ï–î–û–ú–õ–ï–ù–ò–ô (CRON JOB) ---
async function checkAndNotifyUsers() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
  if (!admin.apps.length) {
      console.log('Firebase Admin –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
      return;
  }
  console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  try {
      const settingsSnap = await db.collection('settings').doc('config').get();
      const orderCooldownDays = settingsSnap.exists ? settingsSnap.data().orderCooldownDays : 7;
      
      const usersQuery = db.collection('users')
                          .where('lastOrderTimestamp', '!=', null)
                          .where('cooldownNotified', '==', false);

      const usersSnap = await usersQuery.get();
      if (usersSnap.empty) {
          console.log("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
          return;
      }

      const now = new Date();
      const promises = [];

      usersSnap.forEach(doc => {
          const user = doc.data();
          const lastOrderDate = new Date(user.lastOrderTimestamp);
          const cooldownEndDate = new Date(lastOrderDate.setDate(lastOrderDate.getDate() + orderCooldownDays));

          if (now >= cooldownEndDate && user.telegramId) {
              const message = `üéâ –ü—Ä–∏–≤–µ—Ç, ${user.registration.firstName}! –£ –≤–∞—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ –±–∞—Ä—Ç–µ—Ä—É. –ñ–¥–µ–º –≤–∞—Å!`;
              const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
              const body = JSON.stringify({ chat_id: user.telegramId, text: message });

              console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.registration.firstName} (${user.telegramId})`);
              const sendPromise = fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body })
                  .then(res => res.json())
                  .then(json => {
                      if (json.ok) return doc.ref.update({ cooldownNotified: true });
                      else console.error(`–û—à–∏–±–∫–∞ Telegram –¥–ª—è ${user.telegramId}: ${json.description}`);
                  })
                  .catch(err => console.error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–ª—è ${user.telegramId}:`, err));
              promises.push(sendPromise);
          }
      });

      await Promise.all(promises);
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê–ª–º–∞—Ç—ã
cron.schedule('0 9 * * *', checkAndNotifyUsers, { timezone: "Asia/Almaty" });

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω.');
});
