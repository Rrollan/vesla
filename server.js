// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const fetch = require('node-fetch');
const TelegramBot = require('node-telegram-bot-api');
const xlsx = require('xlsx');
const multer = require('multer'); // –ù–û–í–û–ï: –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000;
const TELEGRAM_BOT_TOKEN = '8227812944:AAFy8ydOkUeCj3Qkjg7_Xsq6zyQpcUyMShY'; 

// –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
try {
  const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY 
    ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY)
    : require('/etc/secrets/serviceAccountKey.json'); 
  
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
  }
} catch (error) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω.");
}
const db = admin.firestore();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

// --- MIDDLEWARE ---
app.use(express.static(path.join(__dirname, '/')));
app.use(express.json({ limit: '10mb' }));
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS') return res.sendStatus(200);
    next();
});

// --- –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢ ---
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// ======================================================================
// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
// ======================================================================

function determineBloggerLevel(followersCount) {
    const count = Number(followersCount) || 0;
    if (count <= 6000) return { level: 'micro', text: '–ú–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä' };
    if (count <= 10500) return { level: 'macro-a', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø A' };
    return { level: 'macro-b', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø B' };
}

function calculateBloggerRating(user) {
    const { followersCount = 0, avgViews = 0 } = user.registration || {};
    const strikes = user.strikes || 0;
    const followersScore = followersCount > 0 ? Math.log10(followersCount) * 2.5 : 0;
    const viewsScore = avgViews > 0 ? Math.log10(avgViews) * 4.5 : 0;
    let rating = ((followersScore + viewsScore - (strikes * 1.5)) / 25) * 10;
    return Math.max(1, Math.min(10, rating)).toFixed(1);
}

// –ò–ó–ú–ï–ù–ï–ù–û: {instagramLogin} —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
function personalizeMessage(template, user) {
    if (!user) return template;
    
    const registrationData = user.registration || {};
    const levelInfo = determineBloggerLevel(registrationData.followersCount);
    const rating = calculateBloggerRating(user);

    const instagramLogin = (registrationData.instagramLogin || '').replace('@', '');
    const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

    return template
        .replace(/{firstName}/g, registrationData.firstName || '')
        .replace(/{instagramLogin}/g, instagramLink) // –ì–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        .replace(/{followersCount}/g, registrationData.followersCount || '0')
        .replace(/{level}/g, levelInfo.text || '')
        .replace(/{rating}/g, rating || '0.0');
}

// –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å —Ñ–æ—Ç–æ
async function sendAdminNotification(orderData, screenshotFileBuffer) {
  const adminSnapshot = await db.collection('admins').get();
  if (adminSnapshot.empty) return;

  const adminDocs = adminSnapshot.docs.filter(doc => doc.data().receivesNotifications !== false);
  if (adminDocs.length === 0) return;

  const adminChatIds = adminDocs.map(doc => doc.id);
  
  const instagramLogin = (orderData.instagram || '').replace('@', '');
  const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

  let message = `*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞—Ä—Ç–µ—Ä*\n\n` +
                `üìù *–ó–∞–∫–∞–∑:* \`${orderData.orderNumber}\`\n` +
                `üë§ *–ë–ª–æ–≥–µ—Ä:*\n` +
                `–ò–º—è: ${orderData.userName}\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: \`${orderData.phone}\`\n` +
                `Instagram: ${instagramLink}\n` +
                `–£—Ä–æ–≤–µ–Ω—å: ${determineBloggerLevel(orderData.followersCount).text}`;

  if (orderData.setName) message += `\nüç± *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* ${orderData.setName}`;

  message += `\n\nüóì *–î–æ—Å—Ç–∞–≤–∫–∞:*\n` +
             `–î–∞—Ç–∞: ${orderData.date} –≤ ${orderData.time}\n` +
             `–ì–æ—Ä–æ–¥: ${orderData.city}\n` +
             `–ê–¥—Ä–µ—Å: ${orderData.street}, –ø. ${orderData.entrance}, —ç—Ç. ${orderData.floor}\n` +
             `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment || '-'}`;
  
  for (const chatId of adminChatIds) {
    try {
      if (screenshotFileBuffer) {
        await bot.sendPhoto(chatId, screenshotFileBuffer, { caption: message, parse_mode: 'Markdown' });
      } else {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${chatId}:`, error.response?.body?.description || error.message);
    }
  }
}

// ======================================================================
// === API –ú–ê–†–®–†–£–¢–´ ===
// ======================================================================

// –ù–û–í–´–ô –ú–ê–†–®–†–£–¢: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ñ–∞–π–ª–æ–º
app.post('/api/create-order', upload.single('screenshot'), async (req, res) => {
    try {
        const orderData = JSON.parse(req.body.order);
        const screenshotFile = req.file;

        const batch = db.batch();
        const orderRef = db.collection('orders').doc(orderData.id);
        batch.set(orderRef, orderData);

        const userRef = db.collection('users').doc(orderData.userId);
        const userOrders = { id: orderData.id, orderNumber: orderData.orderNumber, status: 'new', createdAt: orderData.createdAt };
        const cityTag = orderData.city.toLowerCase().replace(/\s/g, '-');
        
        batch.update(userRef, { 
            orders: admin.firestore.FieldValue.arrayUnion(userOrders),
            tags: admin.firestore.FieldValue.arrayUnion(cityTag),
            lastOrderTimestamp: orderData.createdAt,
            cooldownNotified: false
        });

        await batch.commit();
        await sendAdminNotification(orderData, screenshotFile ? screenshotFile.buffer : null);

        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.' });
    }
});

function convertToExcelBuffer(data, sheetName = 'Sheet1') {
    if (!data || data.length === 0) return null;
    const worksheet = xlsx.utils.json_to_sheet(data);
    const workbook = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(workbook, worksheet, sheetName);
    return xlsx.write(workbook, { bookType: 'xlsx', type: 'buffer' });
}

app.post('/api/export-users', async (req, res) => {
    try {
        const { users, chatId } = req.body;
        if (!users || !Array.isArray(users) || !chatId) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ (users) –∏–ª–∏ ID —á–∞—Ç–∞ (chatId).' });
        }
        if (users.length === 0) {
            await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.");
            return res.status(200).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.'});
        }
        const fileBuffer = convertToExcelBuffer(users, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
        if (!fileBuffer) {
             return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª.' });
        }
        const date = new Date().toISOString().split('T')[0];
        const fileName = `users_export_${date}.xlsx`;
        await bot.sendDocument(chatId, fileBuffer, {}, { filename: fileName, contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetsheet.sheet' });
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.' });
    }
});

app.post('/api/export-orders', async (req, res) => {
    try {
        const { orders, chatId } = req.body;
        if (!orders || !Array.isArray(orders) || !chatId) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ (orders) –∏–ª–∏ ID —á–∞—Ç–∞ (chatId).' });
        }
        if (orders.length === 0) {
            await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.");
            return res.status(200).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.'});
        }
        const fileBuffer = convertToExcelBuffer(orders, '–ó–∞–∫–∞–∑—ã');
        if (!fileBuffer) {
             return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª.' });
        }
        const date = new Date().toISOString().split('T')[0];
        const fileName = `orders_export_${date}.xlsx`;
        await bot.sendDocument(chatId, fileBuffer, {}, { filename: fileName, contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetsheet.sheet' });
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.' });
    }
});

app.post('/api/broadcast', async (req, res) => {
    const { message, tags, senderChatId } = req.body;
    if (!message || !senderChatId) { return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.' }); }
    
    res.status(202).json({ message: '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.' });

    (async () => {
        try {
            let usersQuery = db.collection('users');
            if (tags && tags.length > 0) {
                usersQuery = usersQuery.where("tags", "array-contains-any", tags);
            }
            const usersSnapshot = await usersQuery.get();

            if (usersSnapshot.empty) {
                return await bot.sendMessage(senderChatId, '‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.');
            }
            
            const usersToSend = usersSnapshot.docs
                .map(doc => doc.data())
                .filter(user => user.telegramId); 

            if (usersToSend.length === 0) {
                return await bot.sendMessage(senderChatId, '‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–∏ —É –∫–æ–≥–æ –∏–∑ –Ω–∏—Ö –Ω–µ—Ç Telegram ID.');
            }

            let successCount = 0, errorCount = 0;
            
            for (const user of usersToSend) {
                try {
                    const personalizedText = personalizeMessage(message, user);
                    await bot.sendMessage(user.telegramId, personalizedText, { parse_mode: 'Markdown' });
                    successCount++;
                } catch (e) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, e.response?.body?.description || e.message);
                    errorCount++;
                }
                await new Promise(resolve => setTimeout(resolve, 100)); 
            }

            await bot.sendMessage(senderChatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${errorCount}`);
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            await bot.sendMessage(senderChatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
        }
    })();
});


// ======================================================================
// === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–í–ê–® –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î) ===
// ======================================================================
async function sendTelegramNotification(chatId, text) {
    try {
        await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è ${chatId}:`, error.response ? error.response.body : error.message);
        throw error;
    }
}
async function checkAndNotifyUsers() { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
async function checkReportReminders() { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
async function sendAndUpdate(chatId, message, docRef, updateData) {
    try {
        await sendTelegramNotification(chatId, message);
        await docRef.update(updateData);
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${chatId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.`);
    } catch (err) {
        console.error(`–°–µ—Ç–µ–≤–∞—è –∏–ª–∏ DB –æ—à–∏–±–∫–∞ –¥–ª—è ${chatId}:`, err.message);
    }
}
cron.schedule('0 9 * * *', checkAndNotifyUsers, { timezone: "Asia/Almaty" });
cron.schedule('0 * * * *', checkReportReminders, { timezone: "Asia/Almaty" }); 

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã.');
});
