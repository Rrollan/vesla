// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const fetch = require('node-fetch');

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000;

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
try {
  const serviceAccount = require('/etc/secrets/serviceAccountKey.json'); 
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
} catch (error) {
  console.error("–ö–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω. Cron-–∑–∞–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
}

const db = admin.firestore();
const TELEGRAM_BOT_TOKEN = '8227812944:AAFy8ydOkUeCj3Qkjg7_Xsq6zyQpcUyMShY'; // –í–∞—à —Ç–æ–∫–µ–Ω

// --- –õ–û–ì–ò–ö–ê –°–ï–†–í–ï–†–ê ---
app.use(express.static(path.join(__dirname, '/')));
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// --- PUSH-–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---

// 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
async function checkAndNotifyUsers() {
  if (!admin.apps.length) return;
  console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤...');
  try {
      const settingsSnap = await db.collection('settings').doc('config').get();
      const orderCooldownDays = settingsSnap.exists ? settingsSnap.data().orderCooldownDays : 7;
      
      const usersQuery = db.collection('users')
                          .where('lastOrderTimestamp', '!=', null)
                          .where('cooldownNotified', '==', false);
      const usersSnap = await usersQuery.get();
      if (usersSnap.empty) return;

      const now = new Date();
      const promises = [];
      usersSnap.forEach(doc => {
          const user = doc.data();
          const lastOrderDate = new Date(user.lastOrderTimestamp);
          const cooldownEndDate = new Date(lastOrderDate.setDate(lastOrderDate.getDate() + orderCooldownDays));

          if (now >= cooldownEndDate && user.telegramId) {
              const message = `üéâ –ü—Ä–∏–≤–µ—Ç, ${user.registration.firstName}! –£ –≤–∞—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ –±–∞—Ä—Ç–µ—Ä—É. –ñ–¥–µ–º –≤–∞—Å!`;
              promises.push(sendNotificationAndUpdate(user.telegramId, message, doc.ref, { cooldownNotified: true }));
          }
      });
      await Promise.all(promises);
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
  }
}

// 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–¥–∞—á–µ –æ—Ç—á–µ—Ç–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)
async function checkReportReminders() {
    if (!admin.apps.length) return;
    console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ—á–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á–µ—Ç–∞—Ö...');
    try {
        const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        const twentyThreeHoursAgo = new Date(Date.now() - 23 * 60 * 60 * 1000);

        const ordersQuery = db.collection('orders')
                                .where('status', '==', 'delivered')
                                .where('reminderSent', '==', false)
                                .where('createdAt', '<=', twentyThreeHoursAgo.toISOString())
                                .where('createdAt', '>=', twentyFourHoursAgo.toISOString());
        
        const ordersSnap = await ordersQuery.get();
        if (ordersSnap.empty) return;

        const promises = [];
        ordersSnap.forEach(doc => {
            const order = doc.data();
            if (order.userId) {
                const message = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–ª—è —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #${order.orderNumber}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`;
                // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                db.collection('users').doc(order.userId).get().then(userDoc => {
                    if (userDoc.exists && userDoc.data().telegramId) {
                       promises.push(sendNotificationAndUpdate(userDoc.data().telegramId, message, doc.ref, { reminderSent: true }));
                    }
                });
            }
        });
        await Promise.all(promises);
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á–µ—Ç–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á–µ—Ç–∞—Ö:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async function sendNotificationAndUpdate(chatId, message, docRef, updateData) {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const body = JSON.stringify({ chat_id: chatId, text: message, parse_mode: 'Markdown' });
    try {
        const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body });
        const json = await response.json();
        if (json.ok) {
            await docRef.update(updateData);
            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${chatId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.`);
        } else {
            console.error(`–û—à–∏–±–∫–∞ Telegram –¥–ª—è ${chatId}: ${json.description}`);
        }
    } catch (err) {
        console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${chatId}:`, err);
    }
}


// --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò ---
cron.schedule('0 9 * * *', checkAndNotifyUsers, { timezone: "Asia/Almaty" });
cron.schedule('0 * * * *', checkReportReminders, { timezone: "Asia/Almaty" }); // –ö–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã.');
});
