// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const fetch = require('node-fetch');

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000;
const TELEGRAM_BOT_TOKEN = '8227812944:AAFy8ydOkUeCj3Qkjg7_Xsq6zyQpcUyMShY'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
try {
  // Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY 
    ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY)
    : require('/etc/secrets/serviceAccountKey.json'); 
  
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
  }
} catch (error) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
}
const db = admin.firestore();


// --- MIDDLEWARE ---
// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (index.html, logo.jpg, –∏ —Ç.–¥.)
app.use(express.static(path.join(__dirname, '/')));
// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ CORS
app.use(express.json());
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS') return res.sendStatus(200);
    next();
});

// --- –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢ (–¥–ª—è –æ—Ç–¥–∞—á–∏ index.html) ---
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});


// ======================================================================
// === API –î–õ–Ø –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò ===
// ======================================================================
app.post('/api/broadcast', async (req, res) => {
    const { message, tags, senderChatId } = req.body;
    if (!message || !senderChatId) {
        return res.status(400).json({ error: 'message –∏ senderChatId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
    }
    res.status(202).json({ message: '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.' });

    (async () => {
        try {
            let usersQuery = db.collection('users');
            if (tags && tags.length > 0) {
                usersQuery = usersQuery.where("tags", "array-contains-any", tags);
            }
            const usersSnapshot = await usersQuery.get();
            if (usersSnapshot.empty) {
                return sendTelegramNotification(senderChatId, '‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.');
            }
            const usersToSend = usersSnapshot.docs.map(doc => doc.data().telegramId).filter(id => id);
            if (usersToSend.length === 0) {
                 return sendTelegramNotification(senderChatId, '‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–∏ —É –∫–æ–≥–æ –∏–∑ –Ω–∏—Ö –Ω–µ—Ç Telegram ID.');
            }
            let successCount = 0, errorCount = 0;
            for (const chatId of usersToSend) {
                const result = await sendTelegramNotification(chatId, message, true);
                if (result && result.ok) successCount++;
                else errorCount++;
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            const reportMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${errorCount}`;
            await sendTelegramNotification(senderChatId, reportMessage);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            await sendTelegramNotification(senderChatId, `‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
        }
    })();
});

// ======================================================================
// === API –î–õ–Ø –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
// ======================================================================
app.post('/api/notify', async (req, res) => {
    const { chatId, message } = req.body;
    if (!chatId || !message) {
        return res.status(400).json({ error: 'chatId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
    }
    try {
        const result = await sendTelegramNotification(chatId, message, true);
        if (result && result.ok) {
            res.status(200).json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.' });
        } else {
            res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ API Telegram.', error: result.description });
        }
    } catch (error) {
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

// ======================================================================
// === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò (CRON JOBS) ===
// ======================================================================
async function checkAndNotifyUsers() {
  if (!admin.apps.length) return;
  console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤...');
  try {
      const settingsSnap = await db.collection('settings').doc('config').get();
      const orderCooldownDays = settingsSnap.exists ? settingsSnap.data().orderCooldownDays : 7;
      
      const usersQuery = db.collection('users')
                          .where('lastOrderTimestamp', '!=', null)
                          .where('cooldownNotified', '==', false);
      const usersSnap = await usersQuery.get();
      if (usersSnap.empty) {
          console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
          return;
      }

      const now = new Date();
      usersSnap.forEach(doc => {
          const user = doc.data();
          const lastOrderDate = new Date(user.lastOrderTimestamp);
          const cooldownEndDate = new Date(lastOrderDate.setDate(lastOrderDate.getDate() + orderCooldownDays));

          if (now >= cooldownEndDate && user.telegramId) {
              const message = `üéâ –ü—Ä–∏–≤–µ—Ç, ${user.registration.firstName}! –£ –≤–∞—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ –±–∞—Ä—Ç–µ—Ä—É. –ñ–¥–µ–º –≤–∞—Å!`;
              sendAndUpdate(user.telegramId, message, doc.ref, { cooldownNotified: true });
          }
      });
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
  }
}

async function checkReportReminders() {
    if (!admin.apps.length) return;
    console.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ—á–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á–µ—Ç–∞—Ö...');
    try {
        const twentyFiveHoursAgo = new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString();
        const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

        // –í–∞–∂–Ω–æ: –î–ª—è collectionGroup –Ω—É–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ Firestore
        const ordersQuery = db.collectionGroup('orders')
                                .where('status', '==', 'delivered')
                                .where('reminderSent', '==', false)
                                .where('createdAt', '<=', twentyFourHoursAgo)
                                .where('createdAt', '>', twentyFiveHoursAgo);
        
        const ordersSnap = await ordersQuery.get();
        if (ordersSnap.empty) {
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
            return;
        }

        ordersSnap.forEach(async (doc) => {
            const order = doc.data();
            if (order.userId) {
                const userDoc = await db.collection('users').doc(order.userId).get();
                if (userDoc.exists && userDoc.data().telegramId) {
                   const message = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–ª—è —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #${order.orderNumber}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`;
                   sendAndUpdate(userDoc.data().telegramId, message, doc.ref, { reminderSent: true });
                }
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á–µ—Ç–∞—Ö:', error);
    }
}

async function sendAndUpdate(chatId, message, docRef, updateData) {
    try {
        const response = await sendTelegramNotification(chatId, message, true);
        if (response && response.ok) {
            await docRef.update(updateData);
            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${chatId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.`);
        } else {
            console.error(`–û—à–∏–±–∫–∞ Telegram –¥–ª—è ${chatId}: ${response.description}`);
        }
    } catch (err) {
        console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${chatId}:`, err);
    }
}

async function sendTelegramNotification(chatId, text, returnResponse = false) {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: chatId, text: text, parse_mode: 'Markdown' })
        });
        const result = await response.json();
        if (returnResponse) return result;
        if (!result.ok) throw new Error(result.description);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è ${chatId}:`, error);
        if (returnResponse) return { ok: false, description: error.message };
    }
}

cron.schedule('0 9 * * *', checkAndNotifyUsers, { timezone: "Asia/Almaty" });
cron.schedule('0 * * * *', checkReportReminders, { timezone: "Asia/Almaty" }); 

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã.');
});
