// --- –ó–ê–í–ò–°–ò–°–ò–ú–û–°–¢–ò ---
const express = require('express');
const path = require('path');
const admin = require('firebase-admin');
const cron = require('node-cron');
const TelegramBot = require('node-telegram-bot-api');
const xlsx = require('xlsx');
const crypto = require('crypto'); // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏

// –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø
const fileUpload = require('express-fileupload');
const sharp = require('sharp');
const axios = require('axios');
const FormData = require('form-data');

console.log("--- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---");

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
const PORT = process.env.PORT || 10000;

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const IMGBB_API_KEY = process.env.IMGBB_API_KEY;
const FIREBASE_KEY = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;
const LOYALTY_THRESHOLD = 5; // –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞

// --- –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
if (!TELEGRAM_BOT_TOKEN || !IMGBB_API_KEY || !FIREBASE_KEY) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (TELEGRAM_BOT_TOKEN, IMGBB_API_KEY, FIREBASE_SERVICE_ACCOUNT_KEY).");
    process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ADMIN SDK ---
try {
  const serviceAccount = JSON.parse(FIREBASE_KEY);
  
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
     console.log("Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
  }
} catch (error) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", error.message);
  console.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FIREBASE_SERVICE_ACCOUNT_KEY –≤ Render —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.");
  process.exit(1);
}

const db = admin.firestore();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);
console.log("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");

// --- MIDDLEWARE ---
app.use(express.static(path.join(__dirname, '/')));
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    if (req.method === 'OPTIONS') return res.sendStatus(200);
    next();
});

app.use(fileUpload());
app.use(express.json({ limit: '10mb' }));

// --- –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢ ---
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// ======================================================================
// === MIDDLEWARE –î–õ–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===
// ======================================================================
const checkAuth = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
    
    const initData = authHeader.split(' ')[1];
    try {
        const params = new URLSearchParams(initData);
        const hash = params.get('hash');
        params.delete('hash');

        const dataCheckString = Array.from(params.entries())
            .sort(([a], [b]) => a.localeCompare(b))
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');

        const secretKey = crypto.createHmac('sha256', 'WebAppData').update(TELEGRAM_BOT_TOKEN).digest();
        const hmac = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');

        if (hmac === hash) {
            req.user = JSON.parse(params.get('user'));
            next();
        } else {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π hash.");
            return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData:', error);
        return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.' });
    }
};


// ======================================================================
// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
// ======================================================================

function getStatusInfo(status) {
    const statuses = {
        'new': { text: '–ù–æ–≤—ã–π' }, 'confirmed': { text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' },
        'delivered': { text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω' }, 'awaiting_review': { text: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' },
        'completed': { text: '–ó–∞–≤–µ—Ä—à–µ–Ω' }, 'rejected': { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω' }
    };
    return statuses[status] || { text: status };
}

function determineBloggerLevel(followersCount) {
    const count = Number(followersCount) || 0;
    if (count <= 6000) return { level: 'micro', text: '–ú–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä' };
    if (count <= 10500) return { level: 'macro-a', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø A' };
    return { level: 'macro-b', text: '–ú–∞–∫—Ä–æ–±–ª–æ–≥–µ—Ä —Ç–∏–ø B' };
}

function calculateBloggerRating(user) {
    const { followersCount = 0, avgViews = 0 } = user.registration || {};
    const strikes = user.strikes || 0;
    const followersScore = followersCount > 0 ? Math.log10(followersCount) * 2.5 : 0;
    const viewsScore = avgViews > 0 ? Math.log10(avgViews) * 4.5 : 0;
    let rating = ((followersScore + viewsScore - (strikes * 1.5)) / 25) * 10;
    return Math.max(1, Math.min(10, rating)).toFixed(1);
}

function personalizeMessage(template, user) {
    if (!user) return template;
    
    const registrationData = user.registration || {};
    const levelInfo = determineBloggerLevel(registrationData.followersCount);
    const rating = calculateBloggerRating(user);

    const instagramLogin = (registrationData.instagramLogin || '').replace('@', '');
    const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

    return template
        .replace(/{firstName}/g, registrationData.firstName || '')
        .replace(/{instagramLogin}/g, instagramLink) 
        .replace(/{followersCount}/g, registrationData.followersCount || '0')
        .replace(/{level}/g, levelInfo.text || '')
        .replace(/{rating}/g, rating || '0.0');
}

async function sendAdminNotification(orderData) {
  const adminSnapshot = await db.collection('admins').where('receivesNotifications', '==', true).get();
  if (adminSnapshot.empty) return;

  const adminChatIds = adminSnapshot.docs.map(doc => doc.id);
  
  const instagramLogin = (orderData.instagram || '').replace('@', '');
  const instagramLink = `[@${instagramLogin}](https://www.instagram.com/${instagramLogin})`;

  let message = `*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞—Ä—Ç–µ—Ä*\n\n` +
                `üìù *–ó–∞–∫–∞–∑:* \`${orderData.orderNumber}\`\n` +
                `üë§ *–ë–ª–æ–≥–µ—Ä:*\n` +
                `–ò–º—è: ${orderData.userName}\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: \`${orderData.phone}\`\n` +
                `Instagram: ${instagramLink}\n` +
                `–£—Ä–æ–≤–µ–Ω—å: ${determineBloggerLevel(orderData.followersCount).text}`;

    if (orderData.vcoin_cost) {
        const itemsList = orderData.items.map(item => `- ${item.name} (x${item.quantity})`).join('\n');
        const totalCostInVcoins = orderData.vcoin_cost;
        const paidByVCoin = Math.min(totalCostInVcoins, orderData.budget || 0);

        message += `\n\nüõçÔ∏è *–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:*\n${itemsList}\n` +
                   `*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${totalCostInVcoins.toFixed(1)} V-–ë–æ–Ω—É—Å–æ–≤\n` +
                   `*–û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏:* ${paidByVCoin.toFixed(1)} V-–ë–æ–Ω—É—Å–æ–≤\n` +
                   `*–ö –¥–æ–ø–ª–∞—Ç–µ:* *${(orderData.payment_due_tenge || 0).toFixed(0)} ‚Ç∏*`;
    } else if (orderData.setName) {
        message += `\nüç± *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* ${orderData.setName}`;
    }

  message += `\n\nüóì *–î–æ—Å—Ç–∞–≤–∫–∞:*\n` +
             `–î–∞—Ç–∞: ${orderData.date} –≤ ${orderData.time}\n` +
             `–ì–æ—Ä–æ–¥: ${orderData.city}\n` +
             `–ê–¥—Ä–µ—Å: ${orderData.street}, –ø. ${orderData.entrance || '-'}, —ç—Ç. ${orderData.floor || '-'}\n` +
             `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment || '-'}`;
  
  for (const chatId of adminChatIds) {
    try {
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${chatId}:`, error.response?.body?.description || error.message);
    }
  }
}

async function sendExcelFile(chatId, data, fileNamePrefix, sheetName) {
    if (!data || !Array.isArray(data) || !chatId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
    }
    
    if (data.length === 0) {
        await bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: —Å–ø–∏—Å–æ–∫ (${fileNamePrefix}) –ø—É—Å—Ç.`);
        return;
    }
    const processedData = data.map(row => {
        const newRow = {};
        for (const key in row) {
            const value = row[key];
            if (typeof value === 'string' && value.startsWith('=HYPERLINK')) {
                const match = value.match(/=HYPERLINK\("([^"]+)", "([^"]+)"\)/);
                if (match) {
                    newRow[key] = { t: 's', v: match[2], l: { Target: match[1], Tooltip: '–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ' } };
                } else {
                    newRow[key] = value;
                }
            } else {
                newRow[key] = value;
            }
        }
        return newRow;
    });

    const worksheet = xlsx.utils.json_to_sheet(processedData);
    
    const columnWidths = Object.keys(processedData[0]).map(key => ({
        wch: processedData.reduce((w, r) => Math.max(w, String(r[key] || '').length), key.length + 2)
    }));
    worksheet['!cols'] = columnWidths;

    const workbook = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(workbook, worksheet, sheetName);
    
    const fileBuffer = xlsx.write(workbook, { bookType: 'xlsx', type: 'buffer' });
    const date = new Date().toISOString().split('T')[0];
    const fileName = `${fileNamePrefix}_export_${date}.xlsx`;
    
    await bot.sendDocument(chatId, fileBuffer, {}, { 
        filename: fileName, 
        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
    });
}

// === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò (–°–ï–†–í–ï–†–ù–ê–Ø) ===
async function checkAndUpgradeLoyaltyStatus(userId) {
    const userRef = db.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) return;

    const user = userDoc.data();
    if (user.loyaltyStatus === 'premium') return;

    const completedOrdersCount = (user.orders || []).filter(o => o.status === 'completed' || o.reportAccepted === true).length;
    
    if (completedOrdersCount >= LOYALTY_THRESHOLD) {
        await userRef.update({ loyaltyStatus: 'premium' });
        if (user.telegramId) {
            const message = `‚≠ê –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${user.registration.firstName}! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ!`;
            try {
                await bot.sendMessage(user.telegramId, message);
            } catch (e) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}: ${e.message}`);
            }
        }
    }
}


// ======================================================================
// === API –ú–ê–†–®–†–£–¢–´ ===
// ======================================================================

app.post('/api/create-order', checkAuth, async (req, res) => {
    console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/create-order");
    try {
        const { order: orderData } = req.body;
        if (!orderData || !orderData.city || !orderData.date || !orderData.time) {
            return res.status(400).json({ error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–æ—Ä–æ–¥, –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è.' });
        }

        const { city, date, time } = orderData;
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è: –ì–æ—Ä–æ–¥=${city}, –î–∞—Ç–∞=${date}, –í—Ä–µ–º—è=${time}`);

        // --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è ---
        const now = new Date();
        now.setMinutes(now.getMinutes() + 45); // –ë—É—Ñ–µ—Ä –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ 45 –º–∏–Ω—É—Ç
        const earliestAllowedTime = now.toTimeString().slice(0, 5);
        if (date === new Date().toISOString().split('T')[0] && time < earliestAllowedTime) {
            console.warn(`–û—Ç–∫–∞–∑: –≤—Ä–µ–º—è ${time} —É–∂–µ –ø—Ä–æ—à–ª–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${earliestAllowedTime}`);
            return res.status(400).json({ error: `–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (${time}) —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${earliestAllowedTime}.` });
        }

        // --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º ---
        const scheduleDoc = await db.collection('schedules').doc(city).get();
        const blocksSnapshot = await db.collection('blockedSlots').where('city', '==', city).where('date', '==', date).get();

        if (blocksSnapshot.docs.some(doc => doc.data().type === 'fullday')) {
            console.warn(`–û—Ç–∫–∞–∑: –Ω–∞ –¥–∞—Ç—É ${date} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.`);
            return res.status(400).json({ error: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.' });
        }

        for (const doc of blocksSnapshot.docs) {
            const block = doc.data();
            if (block.type === 'range' && time >= block.startTime && time < block.endTime) {
                console.warn(`–û—Ç–∫–∞–∑: –≤—Ä–µ–º—è ${time} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ${block.startTime}-${block.endTime}.`);
                return res.status(400).json({ error: `–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (${time}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å ${block.startTime} –¥–æ ${block.endTime}.` });
            }
        }
        
        if (!scheduleDoc.exists) {
            console.warn(`–û—Ç–∫–∞–∑: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}.`);
            return res.status(400).json({ error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
        }
        const scheduleData = scheduleDoc.data();
        const dayKey = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][new Date(date).getUTCDay()];
        const daySchedule = scheduleData[dayKey] || '';
        const isTimeInSchedule = daySchedule.split(',').some(range => {
            const [start, end] = range.trim().split('-');
            return time >= start && time < end;
        });

        if (!isTimeInSchedule) {
            console.warn(`–û—Ç–∫–∞–∑: –≤—Ä–µ–º—è ${time} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã ${daySchedule}.`);
            return res.status(400).json({ error: `–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (${time}) –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã.` });
        }
        
        console.log("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...");
        const userRef = db.collection('users').doc(orderData.userId);
        await db.runTransaction(async (transaction) => {
            const userDoc = await transaction.get(userRef);
            if (!userDoc.exists) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            
            const userData = userDoc.data();
            const orderRef = db.collection('orders').doc(orderData.id);
            const userUpdates = {
                orders: admin.firestore.FieldValue.arrayUnion({ id: orderData.id, orderNumber: orderData.orderNumber, status: 'new', createdAt: orderData.createdAt }),
                tags: admin.firestore.FieldValue.arrayUnion(city.toLowerCase().replace(/\s/g, '-'))
            };

            if (orderData.vcoin_cost > 0) {
                const budgetBeforeOrder = userData.vcoin_balance || 0;
                const paidByVCoin = Math.min(orderData.vcoin_cost, budgetBeforeOrder);
                userUpdates.vcoin_balance = budgetBeforeOrder - paidByVCoin;
            } else {
                userUpdates.lastOrderTimestamp = orderData.createdAt;
                userUpdates.cooldownNotified = false;
            }
            
            transaction.set(orderRef, orderData);
            transaction.update(userRef, userUpdates);
        });
        
        await sendAdminNotification(orderData);
        
        try {
            const userDoc = await db.collection('users').doc(orderData.userId).get();
            if (userDoc.exists() && userDoc.data().telegramId) {
                const clientMessage = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ${orderData.orderNumber} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`;
                await bot.sendMessage(userDoc.data().telegramId, clientMessage);
            }
        } catch (notificationError) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${orderData.userId}:`, notificationError);
        }

        console.log(`–ó–∞–∫–∞–∑ ${orderData.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        res.status(500).json({ error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.' });
    }
});

// === –ù–û–í–´–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê ===
app.post('/api/update-order-status', checkAuth, async (req, res) => {
    try {
        const { orderId, newStatus } = req.body;
        if (!orderId || !newStatus) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.' });
        }

        const orderRef = db.collection('orders').doc(orderId);
        let orderData;
        let userData;

        await db.runTransaction(async (transaction) => {
            const orderDoc = await transaction.get(orderRef);
            if (!orderDoc.exists) throw new Error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            
            orderData = orderDoc.data();
            const userRef = db.collection('users').doc(orderData.userId);
            const userDoc = await transaction.get(userRef);
            if (!userDoc.exists) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");

            userData = userDoc.data();
            const orders = userData.orders || [];
            const orderIndex = orders.findIndex(o => o.id === orderId);
            
            if (orderIndex > -1) {
                orders[orderIndex].status = newStatus;
                transaction.update(userRef, { orders: orders });
            }
            transaction.update(orderRef, { status: newStatus });
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (userData && userData.telegramId) {
            let message = null;
            if (newStatus === 'confirmed') message = `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderData.orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!`;
            if (newStatus === 'delivered') message = `üöö –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderData.orderNumber} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –º—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –æ—Ç –≤–∞—Å –æ—Ç—á–µ—Ç.`;
            if (newStatus === 'completed') message = `üéâ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ${orderData.orderNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`;
            
            if (message) {
                try {
                    await bot.sendMessage(userData.telegramId, message);
                } catch (e) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ ${newStatus} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userData.telegramId}: ${e.message}`);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        if (newStatus === 'completed') {
            await checkAndUpgradeLoyaltyStatus(orderData.userId);
        }

        res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω." });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é
app.post('/api/upload-menu-image', checkAuth, async (req, res) => {
    if (!req.files || !req.files.image) {
        return res.status(400).json({ error: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.' });
    }
    const imageFile = req.files.image;

    try {
        const processedImageBuffer = await sharp(imageFile.data)
            .resize(500, 500, { fit: 'cover', position: 'center' })
            .webp({ quality: 80 })
            .toBuffer();
            
        const formData = new FormData();
        formData.append('key', IMGBB_API_KEY);
        formData.append('image', processedImageBuffer.toString('base64'));

        const response = await axios.post('https://api.imgbb.com/1/upload', formData);

        if (response.data.success) {
            res.status(200).json({ success: true, imageUrl: response.data.data.url });
        } else {
            throw new Error(response.data.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ImgBB');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.response ? error.response.data : error.message);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.' });
    }
});


// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–µ–Ω—é
app.post('/api/import-menu-from-file', checkAuth, async (req, res) => {
    if (!req.files || !req.files.menuFile) {
        return res.status(400).json({ error: '–§–∞–π–ª –º–µ–Ω—é –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.' });
    }

    try {
        const workbook = xlsx.read(req.files.menuFile.data, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const menuData = xlsx.utils.sheet_to_json(worksheet);

        if (menuData.length === 0) {
            return res.status(400).json({ error: '–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.' });
        }
        
        const menuCollection = db.collection('menu');
        const oldMenuSnapshot = await menuCollection.get();
        const deleteBatch = db.batch();
        oldMenuSnapshot.docs.forEach(doc => deleteBatch.delete(doc.ref));
        await deleteBatch.commit();
        
        const addBatch = db.batch();
        let addedCount = 0;
        menuData.forEach(item => {
            if (item.name && item.price) {
                const newItemRef = menuCollection.doc();
                addBatch.set(newItemRef, {
                    name: String(item.name),
                    description: String(item.description || ''),
                    price: Number(item.price),
                    category: String(item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    subcategory: String(item.subcategory || ''),
                    imageUrl: '',
                    isVisible: true
                });
                addedCount++;
            }
        });

        await addBatch.commit();

        res.status(200).json({ message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –±–ª—é–¥.` });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.' });
    }
});


// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/export-users', checkAuth, async (req, res) => {
    try {
        const { data, chatId } = req.body;
        const formattedData = data.map(user => {
            const reg = user.registration || user;
            const instagramLogin = (reg.instagramLogin || '').replace('@', '');
            const url = `https://www.instagram.com/${instagramLogin}`;
            return {
                '–ò–º—è': reg.firstName, '–¢–µ–ª–µ—Ñ–æ–Ω': reg.phone,
                'Instagram': `=HYPERLINK("${url}", "@${instagramLogin}")`,
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': reg.followersCount, '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': reg.avgViews, '–†–µ–π—Ç–∏–Ω–≥': calculateBloggerRating(user),
                '–£—Ä–æ–≤–µ–Ω—å': determineBloggerLevel(reg.followersCount).text, 
                '–ë–∞–ª–∞–Ω—Å V-–ë–æ–Ω—É—Å–æ–≤': user.vcoin_balance || 0,
                '–õ–∏–º–∏—Ç V-–ë–æ–Ω—É—Å–æ–≤': user.vcoin_allowance || 0,
                '–°—Ç–∞—Ç—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏': user.loyaltyStatus || 'standard',
                '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω': user.isBlocked ? '–î–∞' : '–ù–µ—Ç', '–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏': user.blockReason, '–®—Ç—Ä–∞—Ñ—ã': user.strikes || 0,
                '–¢–µ–≥–∏': (user.tags || []).join('; '), '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': new Date(user.registrationDate).toLocaleDateString('ru-RU'),
            };
        });
        await sendExcelFile(chatId, formattedData, 'users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
app.post('/api/export-orders', checkAuth, async (req, res) => {
    try {
        const { data, chatId } = req.body;
        const formattedData = data.map(order => {
            const instagramLogin = (order.instagram || '').replace('@', '');
            const url = `https://www.instagram.com/${instagramLogin}`;
            return {
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': order.orderNumber, '–°—Ç–∞—Ç—É—Å': getStatusInfo(order.status).text, '–ò–º—è –±–ª–æ–≥–µ—Ä–∞': order.userName,
                '–¢–µ–ª–µ—Ñ–æ–Ω –±–ª–æ–≥–µ—Ä–∞': order.phone,
                'Instagram': `=HYPERLINK("${url}", "@${instagramLogin}")`,
                '–ì–æ—Ä–æ–¥': order.city, '–ê–¥—Ä–µ—Å': `${order.street}, –ø. ${order.entrance || '-'}, —ç—Ç. ${order.floor || '-'}`,
                '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': order.date, '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏': order.time,
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (V-–ë–æ–Ω—É—Å—ã)': order.vcoin_cost ? order.vcoin_cost.toFixed(1) : '-',
                '–ö –¥–æ–ø–ª–∞—Ç–µ (‚Ç∏)': order.payment_due_tenge ? order.payment_due_tenge.toFixed(0) : 0,
                '–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä': order.setName || '–ú–µ–Ω—é',
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': order.comment, '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç': order.reportLink,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(order.createdAt).toLocaleString('ru-RU')
            };
        });
        await sendExcelFile(chatId, formattedData, 'orders', '–ó–∞–∫–∞–∑—ã');
        res.status(200).json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
app.post('/api/broadcast', checkAuth, async (req, res) => {
    const { message, tags, senderChatId } = req.body;

    if (!message || !senderChatId) {
        return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.' });
    }

    res.status(202).json({ message: '–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω.' });

    try {
        let usersQuery = db.collection('users');
        
        if (tags && tags.length > 0) {
            usersQuery = usersQuery.where('tags', 'array-contains-any', tags);
        }

        const snapshot = await usersQuery.get();
        if (snapshot.empty) {
            await bot.sendMessage(senderChatId, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.');
            return;
        }

        let successCount = 0;
        let failureCount = 0;
        const totalUsers = snapshot.size;

        await bot.sendMessage(senderChatId, `üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
        
        for (const doc of snapshot.docs) {
            const user = doc.data();
            if (user.telegramId) {
                try {
                    const personalized = personalizeMessage(message, user);
                    await bot.sendMessage(user.telegramId, personalized, { parse_mode: 'Markdown', disable_web_page_preview: true });
                    successCount++;
                } catch (error) {
                    failureCount++;
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${user.telegramId}:`, error.response?.body?.description || error.message);
                }
            } else {
                failureCount++;
            }
        }

        const reportMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                              `- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
                              `- –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failureCount}`;
        await bot.sendMessage(senderChatId, reportMessage);

    } catch (error) {
        console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –†–ê–°–°–´–õ–ö–ò:', error);
        await bot.sendMessage(senderChatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞. \n\n–û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è V-Coin
app.post('/api/manage-vcoins', checkAuth, async (req, res) => {
    const { userId, amount, action } = req.body;

    if (!userId || !amount || !action) {
        return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã (userId, amount, action).' });
    }
    if (typeof amount !== 'number' || amount <= 0) {
        return res.status(400).json({ error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.' });
    }
    if (action !== 'add' && action !== 'remove') {
        return res.status(400).json({ error: '–î–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "add" –∏–ª–∏ "remove".' });
    }

    const userRef = db.collection('users').doc(userId);

    try {
        let finalAmount;
        const userData = await db.runTransaction(async (transaction) => {
            const userDoc = await transaction.get(userRe
